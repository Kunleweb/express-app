const mongoose = require('mongoose');
const User = require('./models/userModel.js')

const tourSchema = new mongoose.Schema({
    name: {type:String, required:[true, ' A tour must have a name'], unique: true,
        trim: true
    },
    duration:{
        type: String,
        required: [true, 'A tour must have a duration']
    },

    guides: [{
        type: mongoose.Schema.ObjectId, ref:'User'

    }],

    'Startlocation': {type: {type: String, default:'Point', enum: ['Point']},
    coordinates: [Number], address: String, description: String},
    'locations': [{
      type: {type: String, default:'Point', enum: ['Point']},
    coordinates: [Number], address: String, description: String, day: Number}],
    maxGroupSize: {
        type: Number,
        required: [true, 'A tour must have a group size']
    },
    difficulty: {
        type: String,
        required: [true, 'A tour must have a difficulty']
    },
    ratingsAverage: {type: Number, default: 4.5},
    ratingsQuantity: {
        type: Number,
        default: 0

    },
    price: {type: Number, required: [true, 'A tour must have a price']},
    priceDiscount: Number,
    summary: {
        type:String,
        trim: true, 
        required: [true, 'A tour must have a a description']  

    },
    description: {
        type: String,
        trim: true
    },
    imageCover:{
        type: String,
        required: [true, ' A tour must have a cover image']
    },
    images:[String], 
    createdAt:{
        type: Date, 
        default: Date.now(),
        select: false
    }, 
    startDates: [Date]
}); 

const Tour = mongoose.model('Tour', tourSchema)

module.exports = Tour



// Document Middlware

tourSchema.pre('save', async function(next){
    const userguides = this.guides.map(id=>User.findById(id));
    this.guides = await Promise.all(userguides);
    next()
})